// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AsynkronIT/protoactor-go/actor (interfaces: Actor)

// Package mock is a generated GoMock package.
package mock

import (
	actor "github.com/AsynkronIT/protoactor-go/actor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Actor is a mock of Actor interface
type Actor struct {
	ctrl     *gomock.Controller
	recorder *ActorMockRecorder
}

// ActorMockRecorder is the mock recorder for Actor
type ActorMockRecorder struct {
	mock *Actor
}

// NewActor creates a new mock instance
func NewActor(ctrl *gomock.Controller) *Actor {
	mock := &Actor{ctrl: ctrl}
	mock.recorder = &ActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Actor) EXPECT() *ActorMockRecorder {
	return m.recorder
}

// Receive mocks base method
func (m *Actor) Receive(arg0 actor.Context) {
	m.ctrl.Call(m, "Receive", arg0)
}

// Receive indicates an expected call of Receive
func (mr *ActorMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*Actor)(nil).Receive), arg0)
}
