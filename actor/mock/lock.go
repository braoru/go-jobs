// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/go-jobs/actor (interfaces: Lock)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Lock is a mock of Lock interface
type Lock struct {
	ctrl     *gomock.Controller
	recorder *LockMockRecorder
}

// LockMockRecorder is the mock recorder for Lock
type LockMockRecorder struct {
	mock *Lock
}

// NewLock creates a new mock instance
func NewLock(ctrl *gomock.Controller) *Lock {
	mock := &Lock{ctrl: ctrl}
	mock.recorder = &LockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Lock) EXPECT() *LockMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *Lock) Lock() error {
	ret := m.ctrl.Call(m, "Lock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *LockMockRecorder) Lock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*Lock)(nil).Lock))
}

// Unlock mocks base method
func (m *Lock) Unlock() error {
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *LockMockRecorder) Unlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*Lock)(nil).Unlock))
}
