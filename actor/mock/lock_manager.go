// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/go-jobs/actor (interfaces: LockManager)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// LockManager is a mock of LockManager interface
type LockManager struct {
	ctrl     *gomock.Controller
	recorder *LockManagerMockRecorder
}

// LockManagerMockRecorder is the mock recorder for LockManager
type LockManagerMockRecorder struct {
	mock *LockManager
}

// NewLockManager creates a new mock instance
func NewLockManager(ctrl *gomock.Controller) *LockManager {
	mock := &LockManager{ctrl: ctrl}
	mock.recorder = &LockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *LockManager) EXPECT() *LockManagerMockRecorder {
	return m.recorder
}

// Lock mocks base method
func (m *LockManager) Lock() error {
	ret := m.ctrl.Call(m, "Lock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *LockManagerMockRecorder) Lock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*LockManager)(nil).Lock))
}

// Unlock mocks base method
func (m *LockManager) Unlock() error {
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *LockManagerMockRecorder) Unlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*LockManager)(nil).Unlock))
}
